<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Johnny Ting</title>
    <link>https://johnnyting.github.io/tags/ruby/</link>
    <description>Recent content in Ruby on Johnny Ting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Nov 2019 14:18:24 +0800</lastBuildDate>
    
	<atom:link href="https://johnnyting.github.io/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sidekiq后台任务的简单配置</title>
      <link>https://johnnyting.github.io/posts/sidekiq%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 06 Nov 2019 14:18:24 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/sidekiq%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</guid>
      <description>reference: sidekiq官方文档 ruby-china sidekiq-cron 1.本地安装redis，macos这里使用homebrew安装 =&amp;gt; brew install redis To have launchd start redis now and restart at login: brew services start redis Or, if you don&#39;t want/need a background</description>
    </item>
    
    <item>
      <title>修改puma源码中GET请求地址长度的最大值</title>
      <link>https://johnnyting.github.io/posts/%E4%BF%AE%E6%94%B9puma%E6%BA%90%E7%A0%81%E4%B8%ADget%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80%E9%95%BF%E5%BA%A6%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Sun, 29 Sep 2019 14:20:07 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/%E4%BF%AE%E6%94%B9puma%E6%BA%90%E7%A0%81%E4%B8%ADget%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80%E9%95%BF%E5%BA%A6%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>说一下我遇到的问题，在一个GET请求的接口中，由于请求字符串太长而导致的错误，因为是之前的旧项目，如果将接口改成POST请求的话，很多地方都</description>
    </item>
    
    <item>
      <title>使用vscode如何来debug Rails应用</title>
      <link>https://johnnyting.github.io/posts/%E4%BD%BF%E7%94%A8vscode%E5%A6%82%E4%BD%95%E6%9D%A5debug-rails%E5%BA%94%E7%94%A8/</link>
      <pubDate>Thu, 05 Sep 2019 21:20:46 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/%E4%BD%BF%E7%94%A8vscode%E5%A6%82%E4%BD%95%E6%9D%A5debug-rails%E5%BA%94%E7%94%A8/</guid>
      <description>debugging-Ruby-on-Rails参考链接 前提条件 需要安装 vscode-ruby插件 ruby v2.x版本，安装 ruby-debug-ide 和 debase Gemfile中添</description>
    </item>
    
    <item>
      <title>Rails自定义日志文件存储位置</title>
      <link>https://johnnyting.github.io/posts/rails%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Wed, 10 Jul 2019 22:20:47 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/rails%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/</guid>
      <description>参考链接 1.日志级别 level: :debug, :info, :warn, :error, :fatal 和 :unknown,分别对应数字 0-5。 使用 Rails.logger.level 可以查看当前环境的日志级别 pry(main)&amp;gt; Rails.logger.level =&amp;gt; 0 Rails 所有环境的默认日志等级是 d</description>
    </item>
    
    <item>
      <title>Rails从对象或者hash中获取、去除某些属性</title>
      <link>https://johnnyting.github.io/posts/rails%E4%BB%8E%E5%AF%B9%E8%B1%A1%E6%88%96%E8%80%85hash%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%8E%BB%E9%99%A4%E6%9F%90%E4%BA%9B%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 13 May 2019 15:55:12 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/rails%E4%BB%8E%E5%AF%B9%E8%B1%A1%E6%88%96%E8%80%85hash%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%8E%BB%E9%99%A4%E6%9F%90%E4%BA%9B%E5%B1%9E%E6%80%A7/</guid>
      <description>1.在ActiveRecord中获取指定属性值，slice会获取指定属性后再转换成hash 通常的做法 class Permission &amp;lt; ApplicationRecord has_and_belongs_to_many :role_tpls def to_json { resource: self.resource, status: self.status, name: self.name, allow: self.allow } end end</description>
    </item>
    
    <item>
      <title>Rails中try的用法</title>
      <link>https://johnnyting.github.io/posts/rails%E4%B8%ADtry%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 11 May 2019 18:33:21 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/rails%E4%B8%ADtry%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>我们经常会遇到的下面的场景： @person &amp;amp;&amp;amp; @persion.name # 需确保@person不是nil,否则会报错 NoMethodError: undefined method `name&#39; for nil:NilClass 用 try 改写： @person.try(:name) # 如果@person为nil则返回ni</description>
    </item>
    
    <item>
      <title>Ruby中神奇的&amp;符号</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%A5%9E%E5%A5%87%E7%9A%84%E7%AC%A6%E5%8F%B7/</link>
      <pubDate>Sat, 11 May 2019 14:36:35 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%A5%9E%E5%A5%87%E7%9A%84%E7%AC%A6%E5%8F%B7/</guid>
      <description>这里的 magic 是 &amp;amp; 把 plus1 变成 Block 发给数组了，Block 也就是我们常见的 {} [1,2,3,4].map {|x| x + 1} =&amp;gt;[2, 3, 4, 5] 等价于： [1,2,3,4].map &amp;amp;Proc.new{|x| x + 1 } =&amp;gt;[2, 3, 4, 5] 注意如果没有 &amp;amp; ，解释器在调用 map 时</description>
    </item>
    
    <item>
      <title>Ruby中||=符号理解</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%AC%A6%E5%8F%B7%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sat, 11 May 2019 13:57:35 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%AC%A6%E5%8F%B7%E7%90%86%E8%A7%A3/</guid>
      <description>原文链接 我们经常看到这样的代码： def current_user @current_user ||= session[:user_id] &amp;amp;&amp;amp; User.find(session[:user_id]) end 短短一行代码，却含有很多逻辑，以前老是搞混，这里总结一下。 这句代码相当于: def current_user if @current_user return @current_user else if session[:user_id]</description>
    </item>
    
    <item>
      <title>Ruby中冒号代表的意思</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E5%86%92%E5%8F%B7%E4%BB%A3%E8%A1%A8%E7%9A%84%E6%84%8F%E6%80%9D/</link>
      <pubDate>Sat, 11 May 2019 13:32:54 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E5%86%92%E5%8F%B7%E4%BB%A3%E8%A1%A8%E7%9A%84%E6%84%8F%E6%80%9D/</guid>
      <description>Stack Overflow原文 问题： 1) abc: 2) :xyz 3) abc::xyz 4) abc: :xyz 5) abc: xyz 6) :abc =&amp;gt; xyz 答案： 1) abc: #不能单独存在 2) :xyz # xyz是符号 :xyz.class =&amp;gt; Symbol 3) abc::xyz #命名空间(模块) 例子: module ABC</description>
    </item>
    
    <item>
      <title>Rails中建立AR模型的关联关系</title>
      <link>https://johnnyting.github.io/posts/rails%E4%B8%AD%E5%BB%BA%E7%AB%8Bar%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Sun, 28 Apr 2019 13:51:55 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/rails%E4%B8%AD%E5%BB%BA%E7%AB%8Bar%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/</guid>
      <description>参考链接 Rails AR模型中支持的六种关联： belongs_to (一对一，属于xx，在此模型添加xx外键) has_one (一对一，拥有xx，在xx模型添加自身外键) has_many (一对多，在</description>
    </item>
    
    <item>
      <title>Rails集成axlsx实现导出excel功能</title>
      <link>https://johnnyting.github.io/posts/rails%E9%9B%86%E6%88%90axlsx%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BAexcel%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 01 Mar 2019 17:05:53 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/rails%E9%9B%86%E6%88%90axlsx%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BAexcel%E5%8A%9F%E8%83%BD/</guid>
      <description>axlsx-rails的github地址 首先在Gemfile文件中添加依赖: gem &#39;rubyzip&#39;, &#39;&amp;gt;= 1.2.1&#39; gem &#39;axlsx&#39;, git: &#39;https://github.com/randym/axlsx.git&#39;, ref: &#39;c8ac844&#39; gem &#39;axlsx_rails&#39; 然后下载依赖，执行命令： bundle install 在contr</description>
    </item>
    
    <item>
      <title>第十五章、ruby中的输入输出</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Thu, 14 Feb 2019 10:28:13 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>Ruby的输入&amp;amp;输出 这部分的教程我们讨论Ruby的输入和输出操作。输入是程序从键盘、文件或者其他程序读取数据。输出是程序产生数据。可</description>
    </item>
    
    <item>
      <title>第十四章、ruby中的正则表达式</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 14 Feb 2019 09:17:55 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>Ruby的正则表达式 在这部分和教程中我们将讨论正则表达式。 正则表达式用于文本搜索和更高级的文本操作。内建正则表达式的工具如grep、sed；</description>
    </item>
    
    <item>
      <title>第十三章、ruby中的面向对象编程2</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B2/</link>
      <pubDate>Wed, 13 Feb 2019 14:46:25 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B2/</guid>
      <description>Ruby的面向对象编程2 在这章的教程我们继续讨论Ruby的面向对象编程。 我们以属性修饰符开始。将会包涵类常量、类方法和操作符重载。我们将定义</description>
    </item>
    
    <item>
      <title>第十二章、ruby中的面向对象编程</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 13 Feb 2019 11:48:42 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</guid>
      <description>Ruby的面向对象编程 在这部分的Ruby教程我们将讨论面向对象编程。 编程语言有过程式编程、函数式编程和面向对象编程范式。Ruby中面向对象语</description>
    </item>
    
    <item>
      <title>第十一章、ruby中的哈希</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E5%93%88%E5%B8%8C/</link>
      <pubDate>Wed, 13 Feb 2019 09:27:39 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E5%93%88%E5%B8%8C/</guid>
      <description>哈希表 这部分的教程我们将提到哈希表。哈希表是一个键-值对的集合。与数组相似，不同于数组的是哈希表的索引是确定的，数组的只能是整数。哈希表有时</description>
    </item>
    
    <item>
      <title>第十章、ruby中的数组</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 12 Feb 2019 17:29:08 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/</guid>
      <description>数组 这一部分的教程将介绍数组。数组是有序对象的集合。 一个这是在某个时刻只能保存一项数值。不过数组可以保存多项。这些数据项被称为数组的元素。数</description>
    </item>
    
    <item>
      <title>第九章、ruby中的流程控制</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 12 Feb 2019 17:00:37 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>流程控制 这章的教程我们将讨论流程控制。 条件和循环改变了Ruby程序的流程。条件式是执行条件语句下面的特定语句。循环是执行多次的代码块。程序开</description>
    </item>
    
    <item>
      <title>第八章、ruby中的表达式</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 12 Feb 2019 16:04:18 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>表达式 在这章的教程将介绍Ruby的表达式。 表达式是由操作数和操作符构成的。表达式的操作符表明了对操作数应用什么操作。表达式中操作符的求值顺序</description>
    </item>
    
    <item>
      <title>第七章、ruby中的字符串</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 12 Feb 2019 14:12:32 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>字符串 在这部分的教程将详细的介绍字符串。 字符串是计算机语言中最重要的数据类型之一，这就是为什么我们决定要用一整章来介绍字符串。 字符串是序列化</description>
    </item>
    
    <item>
      <title>第六章、ruby的数据类型</title>
      <link>https://johnnyting.github.io/posts/ruby%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 11 Feb 2019 17:24:25 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>数据类型 在这一章的教程中我们开始讨论数据类型。 所有类别的计算机程序，包括电子表格、文本编辑器、计算器和聊天软件都使用数据。现代计算机语言中各</description>
    </item>
    
    <item>
      <title>第五章、ruby中的对象</title>
      <link>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 11 Feb 2019 16:08:05 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/</guid>
      <description>ruby中的对象 &amp;emsp;&amp;emsp;在这章的教程中我们将简要的介绍下Ruby语言对象的概念。更多的内容将会在面向对象的章节中学习。由于R</description>
    </item>
    
    <item>
      <title>第四章、ruby变量</title>
      <link>https://johnnyting.github.io/posts/ruby%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 11 Feb 2019 11:52:08 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E5%8F%98%E9%87%8F/</guid>
      <description>变量 &amp;emsp;&amp;emsp;变量是保存数据的地址。每个变量都有唯一的一个名字，变量命名存在着一些约定。变量保存着数据对象，更确切的说变量是对</description>
    </item>
    
    <item>
      <title>第三章、ruby基础及变量插值</title>
      <link>https://johnnyting.github.io/posts/ruby%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%8F%98%E9%87%8F%E6%8F%92%E5%80%BC/</link>
      <pubDate>Mon, 11 Feb 2019 10:53:36 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%8F%98%E9%87%8F%E6%8F%92%E5%80%BC/</guid>
      <description>基础内容 &amp;emsp;&amp;emsp;在这一章我们将覆盖Ruby语言的基本程序概念。我们展示一些非常基础的程序，使用到了变量、常量和基本的数据类型</description>
    </item>
    
    <item>
      <title>第二章、ruby词法结构</title>
      <link>https://johnnyting.github.io/posts/ruby%E8%AF%8D%E6%B3%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 11 Feb 2019 09:33:48 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E8%AF%8D%E6%B3%95%E7%BB%93%E6%9E%84/</guid>
      <description>ruby词法结构 ​ 在Ruby语言中我们有多种词法结构，如：注释、变量、字面量、空白符号、操作符、分隔符和关键字。 1.注释 在Ruby中有两种注</description>
    </item>
    
    <item>
      <title>第一章、ruby命令行交互irb的helloworld</title>
      <link>https://johnnyting.github.io/posts/ruby%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BA%A4%E4%BA%92irb%E7%9A%84helloworld/</link>
      <pubDate>Sat, 02 Feb 2019 21:43:44 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/ruby%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BA%A4%E4%BA%92irb%E7%9A%84helloworld/</guid>
      <description>&amp;emsp;&amp;emsp;在之前已经介绍过了ruby的安装 传送门，接下来就该正式学习ruby的语法，这篇文章将介绍ruby的命令行交互解释器i</description>
    </item>
    
    <item>
      <title>安装ruby及rails入门</title>
      <link>https://johnnyting.github.io/posts/%E5%AE%89%E8%A3%85ruby%E5%8F%8Arails%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 15 Jan 2019 11:14:49 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/%E5%AE%89%E8%A3%85ruby%E5%8F%8Arails%E5%85%A5%E9%97%A8/</guid>
      <description>参考文档：RVM官网，rails入门中文官网 一、安装ruby 这里我推荐用RVM（ruby版本管理）安装ruby，环境Linux、Mac。 安装</description>
    </item>
    
    <item>
      <title>梳理与ruby相关的rvm、gem、gemfile、bundle、rails等各种概念</title>
      <link>https://johnnyting.github.io/posts/%E6%95%B4%E7%90%86%E4%B8%8Eruby%E7%9B%B8%E5%85%B3%E7%9A%84%E5%90%84%E7%A7%8D%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 14 Jan 2019 23:50:16 +0800</pubDate>
      
      <guid>https://johnnyting.github.io/posts/%E6%95%B4%E7%90%86%E4%B8%8Eruby%E7%9B%B8%E5%85%B3%E7%9A%84%E5%90%84%E7%A7%8D%E6%A6%82%E5%BF%B5/</guid>
      <description>&amp;emsp;&amp;emsp;因为公司项目用到ruby的mvc框架rails，开始看项目也是一头雾水，不知道项目中的各个文件是干嘛的，经过查阅资料</description>
    </item>
    
  </channel>
</rss>